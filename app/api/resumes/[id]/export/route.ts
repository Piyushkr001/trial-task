// Force Node — pdfkit does NOT work on Edge
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextResponse } from "next/server";
import { and, eq } from "drizzle-orm";
import { db } from "@/config/db";
import { resumes, users } from "@/config/schema";
import { requireUser } from "@/lib/auth";

function safeFilename(s: string) {
  return (s || "resume")
    .replace(/[\/\\?%*:|"<>]/g, "-")
    .replace(/\s+/g, " ")
    .trim()
    .slice(0, 80);
}

// ⬅️ Next 15: params is a Promise — MUST await it
export async function GET(
  _req: Request,
  ctx: { params: Promise<{ id: string }> }
) {
  const { id } = await ctx.params;

  try {
    // 1) Auth + tenancy
    const { email } = await requireUser();
    const me = await db.query.users.findFirst({ where: eq(users.email, email) });
    if (!me) return NextResponse.json({ error: "User not found" }, { status: 404 });

    const row = await db.query.resumes.findFirst({
      where: and(eq(resumes.id, id), eq(resumes.userId, me.id)),
    });
    if (!row) return NextResponse.json({ error: "Resume not found" }, { status: 404 });

    // 2) Use STANDALONE pdfkit (bundled fonts; no AFM file reads)
    const { default: PDFDocument } = await import("pdfkit/js/pdfkit.standalone.js");

    // 3) Build PDF into a Buffer (stable in all Node 18+)
    const chunks: Buffer[] = [];
    const doc = new PDFDocument({ size: "A4", margin: 50 });

    doc.on("data", (c: Buffer) => chunks.push(c));
    doc.on("error", (e: unknown) => {
      throw e instanceof Error ? e : new Error(String(e));
    });

    // ---- Minimal content (replace with your template/fields) ----
    doc.fontSize(22).text(row.title || "Resume", { align: "left" });
    doc.moveDown(0.5);
    doc.fontSize(12).fillColor("#666").text(`Template: ${row.template}`);
    doc.moveDown();
    doc.moveTo(50, doc.y).lineTo(545, doc.y).strokeColor("#ccc").stroke();
    doc.moveDown();
    doc.fillColor("#000").fontSize(12).text(
      "This is a placeholder PDF generated by PDFKit (standalone). Replace with real resume content."
    );
    // ------------------------------------------------------------

    doc.end();
    await new Promise<void>((resolve) => doc.on("end", () => resolve()));

    const pdf = Buffer.concat(chunks);
    const filename = `${safeFilename(row.title)}.pdf`;

    return new NextResponse(pdf, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `inline; filename="${filename}"`,
        "Cache-Control": "no-store",
      },
    });
  } catch (err: any) {
    console.error("[/api/resumes/:id/export] error:", err?.stack || err);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
